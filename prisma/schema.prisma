datasource db {
  provider = "mongodb"
  url = env("DATABASE_URL")
}

generator client {
  provider  = "prisma-client-js"
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  hashedPassword     String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  city               String?
  country            String?
  line1              String?
  line2              String?
  postal_code        String?
  state              String?

  role Role @default(USER)

  accounts           Account[]
  orders             Order[]
  review             Review[]
}

model Product {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  description        String
  price              Float
  brand              String
  category           String
  grid               Grid[]
  reviews            Review[]
}

model Review {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  productId          String   @db.ObjectId
  rating             Int
  comment            String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  product            Product  @relation(fields: [productId], references: [id])
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  amount             Float
  currency           String
  status             String
  deliveryStatus     String?
  createDate         DateTime @default(now())
  paymentIntentId    String   @unique
  products           CartProductType[]
  address            Address?

  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type CartProductType {
  id String
  name String
  description String
  category String
  brand String
  grid Grid
  quantity Int
  price Float
}

type Grid {
  color String
  colorCode String
  image String
  size Size?
  stock Int?
}

type Address {
  city String
  country String
  line1 String
  line2 String?
  postal_code String
  state String
}

enum Role {
  USER
  ADMIN
}

enum Size {
  P
  PP
  M
  MM
  G
  GG
}